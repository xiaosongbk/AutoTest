http://blog.sina.com.cn/u/3053349671

selenium2.0关于python的常用函数（一）



新建实例driver = webdriver.Chrome() 

1.通过标签属性Id查找元素

方法：find_element_by_id(element_id)

实例：driver.find_element_by_id("iptUsername")

2.通过标签属性name查找元素

方法：find_element_by_name(element_name)

实例：driver.find_element_by_id("inputPwname")

3.通过标签Xpath路径查找元素

方法：find_element_by_xpath(xpath)

实例：driver.find_element_by_xpath("//div[@id='menuContainer']/div/div/ul/li[4]/a")

4.通过标签名tagname查找元素

方法：find_element_by_tag_name(tag_name)

实例：driver.find_element_by_tag_name("input")

注意：通过tag_name查找时使用find_element_by_tag_name查找到的是第一个标签的tag_name

5.通过标签中的元素文本链接查找元素

方法：find_element_by_link_text(link_text)

实例：driver.find_element_by_link_text('登  录')

6.通过标签的class属性查找元素

方法：find_elements_by_class_name(class_name)

实例：driver.find_elements_by_class_name("x-panel-body")

7.通过css样式查找元素

方法：find_element_by_css_selector()

实例：driver.find_element_by_css_selector("input.btn")
温馨提示：find_elements_by_id()查询到的是一个集合，如果id名字重复的时候可以采取find_elements_by_id()，其他的查询方式同理；

8.浏览器中加载url

方法：get(url)

实例：driver.get("http//:www.baidu.com")

9.向前

方法：forward()

实例：driver.forward()

10.返回当前会话中的cookies

方法：get_cookies()

实例：driver.get_cookies()

11.根据cookie name 查找

方法：driver.get_cookie(cookie_name)

实例：driver.get_cookie("NET_SessionId")

12.截取当前页面

方法：

get_screenshot_as_file(filename)
实例：driver.
get_screenshot_as_file("D:\\Program Files\\Python27\\NM.bmp")
13.获取当前窗口的坐标
方法：get_window_position()
实例：driver.get_window_position()
14.获取当前窗口的长和宽
方法：get_window_size()
实例：driver.get_window_size()	


--------------------------------------------------------------------------------
selenium2.0关于python的常用函数（二）



新建实例driver = webdriver.Chrome()

1.获取当前页面的Url函数

方法：current_url

实例：

driver.current_url

2.获取元素坐标

方法：location

解释：首先查找到你要获取元素的，然后调用location方法

实例：

driver.find_element_by_xpath("//*[@id='tablechart']/tbody/tr[14]/td[9]").location

3.表单的提交

方法：submit

解释:查找到表单（from）直接调用submit即可

实例：

driver.find_element_by_id("form1").submit()

4.获取CSS的属性值

方法：value_of_css_property(css_name)
实例：
driver.find_element_by_css_selector("input.btn").value_of_css_property("input.btn")
5.获取元素的属性值
方法：get_attribute(element_name)
实例：
driver.find_element_by_id("sellaiyuan").get_attribute("sellaiyuan")
6.判断元素是否被选中
方法：is_selected()
实例：
driver.find_element_by_id("form1").is_selected()
7.返回元素的大小
方法：size
实例：
driver.find_element_by_id("iptPassword").size
返回值：{'width': 250, 'height': 30}
8.判断元素是否显示
方法：is_displayed()
实例：
driver.find_element_by_id("iptPassword").is_displayed()
9.判断元素是否被使用
方法：is_enabled()
实例：
driver.find_element_by_id("iptPassword").is_enabled()
10.获取元素的文本值
方法：text
实例：driver.find_element_by_id("iptUsername").text
11.元素赋值
方法：send_keys(*values)
实例：
driver.find_element_by_id("iptUsername").send_keys('admin')
注意如果是函数需要增加转义符u,eg.
driver.find_element_by_id("iptUsername").send_keys(u'青春')
12.返回元素的tagName
方法：tag_name
实例：
driver.find_element_by_id("iptUsername").tag_name
13.删除浏览器所以的cookies
方法：delete_all_cookies()
实例：
driver.delete_all_cookies()
14.删除指定的cookie
方法：delete_cookie(name)
实例：deriver.delete_cookie("my_cookie_name")
15.关闭浏览器
方法：close()
实例：driver.close()
16.关闭浏览器并且推出驱动程序
方法：quit()
实例：driver.quit()
17.返回上一页
方法：back()
实例：driver.back()
18.设置等待超时
方法：implicitly_wait(wait_time)
实例：driver.implicitly_wait(30)
19.浏览器窗口最大化
方法：maximize_window()
实例：driver.maximize_window()
20.查看浏览器的名字
方法：name
实例：drvier.name


webdriver中元素查找常用方法
http://blog.sina.com.cn/s/blog_915cefbf0101sah4.html

Selenium寻找元素定位
id
findElement(by.id(“id”))
name
findElement(by.name(“name”))
class_name
findElement(by.className(“className”))
linkText
driver.findElement(By.linkText("Inbox"));
partialLinkText
driver.findElement(By.partialLinkText("Inbox"));
tagName
tagName(“html的类别信息如button”)
Css
1）绝对路径 在DOM中的具体位置
findElement(by.cssSelector(“html body div form input”))
或findElement(by.cssSelector(“html>body>div>form>input”))
2）相对路径
        driver.findElement(By.cssSelector("input"));第一个input元素。
driver.findElement(By.cssSelector("input.login")); html标签.class的属性值
3）相对Id选择器
driver.findElement(By.cssSelector("input#username"));html标签#id
driver.findElement(By.cssSelector("#username"));只是#id
4）属性
driver.findElement(By.cssSelector("input[name=username]"));使用name属性
driver.findElement(By.cssSelector("img[alt='Previous']"));使用alt属性
driver.findElements(By.cssSelector("img[alt]"));通过属性名称查找，页面所有img含 有alt属性的标签
driver.findElement(By.cssSelector("input[type='submit'][value='Login']"));联合多个属 性查询
driver.findElements(By.cssSelector("img:not([alt])"));使用伪类
5）部分属性 (对于页面上有动态变化的属性的元素是非常有用的)
^=  driver.findElement(By.cssSelector(Input[id ^ =‘ ctrl’]));匹配到id头部 如ctrl_12
$=  driver.findElement(By.cssSelector(Input[id ^ =‘ ctrl’]));匹配到id尾部 如a_ctrl
*=  driver.findElement(By.cssSelector(Input[id *=‘ ctrl’]));匹配到id中间如1_ctrl_12
高级CSS
1）查询子元素
WebElement userName =  driver.findElement(By.cssSelector("form#loginForm > input"));
WebElement userName = driver.findEleme(By.cssSelector("form#loginForm :nth-child(2)"));
:first-child 定位表单第一个子元素
:last-child 定位表单最后一个子元素
:nth-child(2) 定位表单中第二个子元素
2）使用伪类
driver.findElement(By.cssSelector("input:focus")); 也可使用hover active
:enable  input:enable 定位属性为enable的input元素
:disable  input:disable 定位属性为disable的input元素
:checked input:checked 定位有多选框属性为checked的元素
3）查询兄弟元素
driver.findElement(By.cssSelector("#nv a + b")); 定位到a 再定位到和它相邻的b
Xpath（可以向前向后查询DOM结构，css只能向前）
1）绝对路径
driver.findElement(By.xpath("html/body/div/div/form/input"));//如果发生结构改变则 找不到
2）相对路径
driver.findElement(By.xpath("//input"));//假设在DOM中的第一个
3）使用索引
driver.findElement(By.xpath("//input[2]"));//找第二个input元素
4）属性值
driver.findElement(By.xpath("//input[@id='username']"));//使用id属性匹配
driver.findElement(By.xpath("img[@alt='Previous']"));//使用alt属性
driver.findElement(By.xpath ("//input[@type='submit'][@value='Login']"));//联合多个属性
WebElement previousButton = driver.findElement (By.xpath("//input[@type='submit'and  @value='Login']"));//使用and联合查询
WebElement previousButton = driver.findElement (By.xpath("//input[@type='submit'or  @value='Login']"));//使用or选择查询
5）属性名称
List imagesWithAlt = driver.findElements (By.xpath ("img[@alt]"));//使用属 性名称  img中带有alt属性的元素
6）部分属性值
starts-with() driver.findElement(By.XPath(“input[starts-with(@id,’ctrl’)]”));
ends-with() driver.findElement(By.XPath(“input[ends-with(@id,’ctrl’)]”));
contains() starts-with() driver.findElement(By.XPath(“input[contains(@id,’ctrl’)]”));
7）使用值匹配任意元素属性值
driver.findElement(By.xpath("//input[@*='username']"));任意属性名称为username的元素
8）XPath轴 借住于元素与元素之间的关系定位
ancestor //td[text()=’Product1’]/ancestor::table 选择当前节点所有的父类元素 
  属性   名称             元素
descendant //table/descendant::td/input 选择当前节点所有子元素
following  //td[text()=’Product1’]/following::tr 选择当前元素结束标签后的所有元素
following-sibling //td[text()=’Product1’]/following-sibling::td 当前元素后的兄弟元素
preceding //td[text()=’$150’]/preceding::tr 当前节点开始标签之前的所有节点
preceding-sibling //td[text()=’$150’]/preceding-sibling::td 当前借点之前的所有同级节点
定位单元格元素
方式：
table：定义表格
caption:表格标题
th:表头
tr:行
td:单元
thead:页眉
tbody:主题
tfoot:页脚
col:列的属性
colgroup:列的组
 
findElement将会查询整个DOM 最终返回第一个找到的匹配的元素
findElement可以查询子类，缩写为
driver.findElement(By.id("div1")).findElement(By.linkText("top"));
查找一个元素                 查找这个元素下的子类top
当findElement找不到元素时。抛出NoSuchElementFoundException
findElements()方法返回所有匹配定位策略的WebElement的集合，我们可以使用java中List类来创建WebElements的实例，实现查找多个元素：
List links = driver.findElements(By.cssSelector("#nv a")); 
 






